cart_model$y
predict(cart_model)
unique(predict(cart_model))
predict(cart_model)
predict(cart_model) - cart_model$y
(predict(cart_model) - cart_model$y)/cart_model$y
mean((predict(cart_model) - cart_model$y)/cart_model$y)
mean(abs((predict(cart_model) - cart_model$y)/cart_model$y))
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
round(16.7645645,2)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
attributes(rf_model)
rf_model$y
cart_model$y
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
cv.tree(cart_model, , prune.tree)
cv.tree(cart_model, , prune.tree)
cv.tree(cart_model, , prune.tree)$tree.sequence
cv.tree(cart_model, , prune.tree)$prune
cv.tree(cart_model, , prune.tree)$k
cv.tree(cart_model, , prune.tree)$dev
library(tree)
library(randomForest)
calc.RMSE <- function(predicted, actual){
RMSE <- sqrt(mean((predicted - actual)^2))
}
crime <- read.table("9.1uscrimeSummer2018.txt", header=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
rf_model$importance
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
cv.tree(cart_model)
attributes(cv.tree(cart_model))
attributes(cv.tree(cart_model))
cv.tree(cart_model)
cart_model <- tree(Crime~., data=crime, x=TRUE, y=TRUE, k=3)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
rf_model
rf_model$maxnodes
attributes(rf_model_
)
attributes(rf_model)
rf_model$oob.times
rf_model$oob.ntree
rf_model$ntree
rf_model$forest
attributes(rf_model)
rf_model$terms
attributes(rf_model)
rf_model$inbag
rf_model$coefs
rf_model$mtry
rf_model$predicted
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
crime
sample(1:nrow(crime), size=12)
test_ind <- sample(1:nrow(crime), size=12)
crime[test_ind,]
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
predict(cart_model, crime_test)
crime_test
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.1b.R', echo=TRUE)
library(tree)
library(randomForest)
set.seed(1)
calc.RMSE <- function(predicted, actual){
RMSE <- sqrt(mean((predicted - actual)^2))
}
crime <- read.table("9.1uscrimeSummer2018.txt", header=TRUE)
test_ind <- sample(1:nrow(crime), size=12)
crime_train <- crime[-test_ind,]
crime_test <- crime[test_ind,]
cart_model <- tree(Crime~., data=crime_train, x=TRUE, y=TRUE)
summary(cart_model)
cart_rmse_train <- calc.RMSE(predict(cart_model), cart_model$y)
cart_mean_abs_e_train <- mean(abs((predict(cart_model) - cart_model$y)/cart_model$y))
cat(sprintf("Training RMSE: %s", round(cart_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value", round(100*cart_mean_abs_e_train,1)))
cart_rmse_test <- calc.RMSE(predict(cart_model, crime_test), crime_test$Crime)
cart_mean_abs_e_test <- mean(abs((predict(cart_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("Test RMSE: %s", round(cart_rmse_test,1)))
cat(sprintf("For testing data: On average, the model predicted value is within %s percent of the actual value", round(100*cart_mean_abs_e_test,1)))
cart_model <- tree(Crime~., data=crime_train, x=TRUE, y=TRUE)
cart_rmse_train <- calc.RMSE(predict(cart_model), cart_model$y)
cart_mean_abs_e_train <- mean(abs((predict(cart_model) - cart_model$y)/cart_model$y))
cat(sprintf("Training RMSE: %s", round(cart_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value", round(100*cart_mean_abs_e_train,1)))
cart_rmse_test <- calc.RMSE(predict(cart_model, crime_test), crime_test$Crime)
cart_mean_abs_e_test <- mean(abs((predict(cart_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("Test RMSE: %s", round(cart_rmse_test,1)))
cat(sprintf("For testing data: On average, the model predicted value is within %s percent of the actual value", round(100*cart_mean_abs_e_test,1)))
cart_model <- tree(Crime~., data=crime_train, x=TRUE, y=TRUE)
cart_rmse_train <- calc.RMSE(predict(cart_model), cart_model$y)
cart_mean_abs_e_train <- mean(abs((predict(cart_model) - cart_model$y)/cart_model$y))
cat(sprintf("Training RMSE: %s\n", round(cart_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value\n", round(100*cart_mean_abs_e_train,1)))
cart_rmse_test <- calc.RMSE(predict(cart_model, crime_test), crime_test$Crime)
cart_mean_abs_e_test <- mean(abs((predict(cart_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("Test RMSE: %s\n", round(cart_rmse_test,1)))
cat(sprintf("For testing data: On average, the model predicted value is within %s percent of the actual value\n", round(100*cart_mean_abs_e_test,1)))
numpred <- 4
rf_model <- randomForest(Crime~., data=crime_train, mtry=numpred, importance=TRUE)
summary(rf_model)
rf_rmse_train <- calc.RMSE(predict(rf_model), rf_model$y)
rf_mean_abs_e_train <- mean(abs((predict(rf_model) - rf_model$y)/rf_model$y))
cat(sprintf("RMSE: %s", round(rf_rmse_train,1)))
cat(sprintf("On average, the model predicted value is within %s percent of the actual value", round(100*rf_mean_abs_e_train,1)))
rf_rmse_test <- calc.RMSE(predict(rf_model, crime_test), crime_test$Crime)
rf_mean_abs_e_test <- mean(abs((predict(rf_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("RMSE: %s", round(rf_rmse_test,1)))
cat(sprintf("On average, the model predicted value is within %s percent of the actual value", round(100*rf_mean_abs_e_test,1)))
numpred <- 4
rf_model <- randomForest(Crime~., data=crime_train, mtry=numpred, importance=TRUE)
rf_rmse_train <- calc.RMSE(predict(rf_model), rf_model$y)
rf_mean_abs_e_train <- mean(abs((predict(rf_model) - rf_model$y)/rf_model$y))
cat(sprintf("RMSE: %s", round(rf_rmse_train,1)))
cat(sprintf("On average, the model predicted value is within %s percent of the actual value", round(100*rf_mean_abs_e_train,1)))
rf_rmse_test <- calc.RMSE(predict(rf_model, crime_test), crime_test$Crime)
rf_mean_abs_e_test <- mean(abs((predict(rf_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("RMSE: %s", round(rf_rmse_test,1)))
cat(sprintf("On average, the model predicted value is within %s percent of the actual value", round(100*rf_mean_abs_e_test,1)))
numpred <- 4
rf_model <- randomForest(Crime~., data=crime_train, mtry=numpred, importance=TRUE)
rf_rmse_train <- calc.RMSE(predict(rf_model), rf_model$y)
rf_mean_abs_e_train <- mean(abs((predict(rf_model) - rf_model$y)/rf_model$y))
cat(sprintf("RMSE: %s\n", round(rf_rmse_train,1)))
cat(sprintf("On average, the model predicted value is within %s percent of the actual value\n", round(100*rf_mean_abs_e_train,1)))
rf_rmse_test <- calc.RMSE(predict(rf_model, crime_test), crime_test$Crime)
rf_mean_abs_e_test <- mean(abs((predict(rf_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("RMSE: %s\n", round(rf_rmse_test,1)))
cat(sprintf("On average, the model predicted value is within %s percent of the actual value\n", round(100*rf_mean_abs_e_test,1)))
unique(predict(cart_model))
length(unique(predict(cart_model)))
length(predict(cart_model))
length(unique(predict(cart_model)))
cat("\014")
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
setwd("C:/classwork/isye6501/Week04")
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
findat
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
test
train
source('~/My Received Files/10dot3.R', echo=TRUE)
install.packages("pROC")
source('~/My Received Files/10dot3.R', echo=TRUE)
source('~/My Received Files/10dot3.R', echo=TRUE)
findat
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
findat
predictors
loan
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
summary(model)$coef
cv$delta
cv2$delta
cv3$delta
cv
cv$delta[1]
cv2$delta[1]
cv3$delta[1]
cv$delta[0]
cv2$delta[0]
cv3$delta[0]
cv$delta
cv2$delta
cv3$delta
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
model
summary(model)
source('~/My Received Files/10dot3.R', echo=TRUE)
cv2
cv2$delta
cv3$delta
data.frame(summary(model)$coef[summary(model)$coef[, 4] <= .05, 4])
cv.glm(train, model, K = 10)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
ans
summary(model)
summary(ans)
ans
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
findat <- data.frame(read.table("10.3germancreditSummer2018.txt", header = F))
findat[,21] <- findat[,21] - 1
train_indices <- sample(1:nrow(findat), size = round(nrow(findat) * .8))
train = findat[train_indices,]
test = findat[-train_indices,]
func = V21 ~ factor(V1) + V2 + factor(V3) + factor(V4) + V5 + factor(V6) + factor(V7) + V8 + factor(V9) + factor(V10) + V11 + factor(V12) + V13 + factor(V14) + factor(V15) + V16 + factor(V17) + V18 + factor(V19) + factor(V20)
model = glm(func, family = binomial(link = "logit"), data = train)
summary(model)
cv.glm(train, model, K = 10)$delta
cm
cm = confusionMatrix(data = answerx,
reference = actual,
positive = '0')
totalcost = matrix(, 100, ncol = 2)
totalcost
matrix(, nrow(test), ncol = 1)
matrix(, nrow(test), ncol = 1)
matrix(, 100, ncol = 2)
matrix(100, ncol = 2)
matrix(, 100, ncol = 2)
n
totalcost
source('~/My Received Files/10dot3.R', echo=TRUE)
totalcost
source('~/My Received Files/10dot3.R', echo=TRUE)
answerx
length(pred)
pred
answerx
actual
cm = confusionMatrix(data = answerx,
reference = actual,
positive = '0')
cm = confusionMatrix(data = t(answerx),
reference = actual,
positive = '0')
cm = confusionMatrix(data = answerx,
reference = t(actual),
positive = '0')
cm = confusionMatrix(data = as.factor(answerx),
reference = as.factor(actual),
positive = '0')
cm
source('~/My Received Files/10dot3.R', echo=TRUE)
cm = confusionMatrix(data = as.factor(answerx),
reference = as.factor(actual),
positive = '0')
cm
source('~/My Received Files/10dot3.R', echo=TRUE)
source('~/My Received Files/10dot3.R', echo=TRUE)
cm
source('~/My Received Files/10dot3.R', echo=TRUE)
totalcost = matrix(, 100, ncol = 2)
totalcost
thresholdlist <- 1:10
thresholdlist
thresholdlist <- c(1:10)
thresholdlist
thresholdlist <- c(1:50)/50
thresholdlist
matrix(, nrow(test), ncol = 1)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
test
test$V21
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
cm
cm$table[2, 1]
cm$table[1, 2]
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
totalcost
totalcost
totalcost[which.min(totalcost[, 2]), 1]
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
totalcost
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
cm
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
cm
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
cm
crime <- read.table("9.1uscrimeSummer2018.txt", header=TRUE)
pca <- prcomp(crime[,1:15], scale. = TRUE)
summary(pca)
n_pca_fields <- 7
pca_crime <- data.frame(cbind(pca$x[,1:n_pca_fields], Crime=crime[,16]))
model <- lm(Crime~., data=pca_crime)
summary(model)
model_pca_coef <- model$coefficients[2:length(model$coefficients)]
pca_x_comp <- t(pca$rotation[,1:length(model$coefficients) - 1])
scaled_coef <- model_pca_coef%*%pca_x_comp
intercept <- model$coefficients[1] - sum(scaled_coef*sapply(crime[,1:15], mean)/sapply(crime[,1:15],sd))
coef <- scaled_coef/sapply(crime[,1:15],sd)
M = 14.0
So = 0
Ed = 10.0
Po1 = 12.0
Po2 = 15.5
LF = 0.640
M.F = 94.0
Pop = 150
NW = 1.1
U1 = 0.120
U2 = 3.6
Wealth = 3200
Ineq = 20.1
Prob = 0.04
Time = 39.0
testpoint <- data.frame(M,So,Ed, Po1, Po2, LF, M.F, Pop, NW, U1, U2, Wealth, Ineq, Prob, Time)
ans <- coef%*%t(as.matrix(testpoint)) + intercept
ans
summary(model)$r.squared
summary(model)$adj.r.squared
library(tree)
library(randomForest)
set.seed(1)
calc.RMSE <- function(predicted, actual){
RMSE <- sqrt(mean((predicted - actual)^2))
}
crime <- read.table("9.1uscrimeSummer2018.txt", header=TRUE)
test_ind <- sample(1:nrow(crime), size=12)
crime_train <- crime[-test_ind,]
crime_test <- crime[test_ind,]
cart_model <- tree(Crime~., data=crime_train, x=TRUE, y=TRUE)
cart_rmse_train <- calc.RMSE(predict(cart_model), cart_model$y)
cart_mean_abs_e_train <- mean(abs((predict(cart_model) - cart_model$y)/cart_model$y))
cart_rmse_test <- calc.RMSE(predict(cart_model, crime_test), crime_test$Crime)
cart_mean_abs_e_test <- mean(abs((predict(cart_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("Training RMSE: %s\n", round(cart_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value\n", round(100*cart_mean_abs_e_train,1)))
cat(sprintf("Test RMSE: %s\n", round(cart_rmse_test,1)))
cat(sprintf("For testing data: On average, the model predicted value is within %s percent of the actual value\n", round(100*cart_mean_abs_e_test,1)))
numpred <- 4
rf_model <- randomForest(Crime~., data=crime_train, mtry=numpred, importance=TRUE)
rf_rmse_train <- calc.RMSE(predict(rf_model), rf_model$y)
rf_mean_abs_e_train <- mean(abs((predict(rf_model) - rf_model$y)/rf_model$y))
rf_rmse_test <- calc.RMSE(predict(rf_model, crime_test), crime_test$Crime)
rf_mean_abs_e_test <- mean(abs((predict(rf_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("RMSE: %s\n", round(rf_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value\n", round(100*rf_mean_abs_e_train,1)))
cat(sprintf("RMSE: %s\n", round(rf_rmse_test,1)))
cat(sprintf("For testing data:On average, the model predicted value is within %s percent of the actual value\n", round(100*rf_mean_abs_e_test,1)))
length(predict(cart_model))
length(unique(predict(cart_model)))
findat <- data.frame(read.table("10.3germancreditSummer2018.txt", header = F))
findat[,21] <- findat[,21] - 1
train_indices <- sample(1:nrow(findat), size = round(nrow(findat) * .8))
train = findat[train_indices,]
test = findat[-train_indices,]
func = V21 ~ factor(V1) + V2 + factor(V3) + factor(V4) + V5 + factor(V6) + factor(V7) + V8 + factor(V9) + factor(V10) + V11 + factor(V12) + V13 + factor(V14) + factor(V15) + V16 + factor(V17) + V18 + factor(V19) + factor(V20)
model = glm(func, family = binomial(link = "logit"), data = train)
summary(model)
cv.glm(train, model, K = 10)$delta
pred = predict.glm(model, newdata = test, type = 'response')
thresholdlist <- c(1:50)/50
totalcost = matrix(, length(thresholdlist), ncol = 2)
n = 1
for (testthresh in thresholdlist) {
answerx = matrix(, nrow(test), ncol = 1)
for (x in 1:length(pred)) {
if (pred[x] >= testthresh) {
answerx[x] = 1
} else
answerx[x] = 0
}
cm = confusionMatrix(data = as.factor(answerx),
reference = as.factor(test$V21),
positive = '0')
cost = cm$table[2, 1] * 1 + cm$table[1, 2] * 5
totalcost[n, 1] = testthresh
totalcost[n, 2] = cost
n = n + 1
}
opt_threshold <- totalcost[which.min(totalcost[, 2]), 1]
answerx = matrix(, nrow(test), ncol = 1)
for (x in 1:length(pred)) {
if (pred[x] >= opt_threshold) {
answerx[x] = 1
} else
answerx[x] = 0
}
cm = confusionMatrix(data = as.factor(answerx),
reference = as.factor(test$V21),
positive = '0')
cm
findat <- data.frame(read.table("10.3germancreditSummer2018.txt", header = F))
findat[,21] <- findat[,21] - 1
train_indices <- sample(1:nrow(findat), size = round(nrow(findat) * .8))
train = findat[train_indices,]
test = findat[-train_indices,]
func = V21 ~ factor(V1) + V2 + factor(V3) + factor(V4) + V5 + factor(V6) + factor(V7) + V8 + factor(V9) + factor(V10) + V11 + factor(V12) + V13 + factor(V14) + factor(V15) + V16 + factor(V17) + V18 + factor(V19) + factor(V20)
model = glm(func, family = binomial(link = "logit"), data = train)
summary(model)
cv.glm(train, model, K = 10)$delta
source('C:/classwork/isye6501/Week04/HW04-10.3.R', echo=TRUE)
cv.glm(train, model, K = 10)$delta
findat <- data.frame(read.table("10.3germancreditSummer2018.txt", header = F))
findat[,21] <- findat[,21] - 1
train_indices <- sample(1:nrow(findat), size = round(nrow(findat) * .8))
train = findat[train_indices,]
test = findat[-train_indices,]
func = V21 ~ factor(V1) + V2 + factor(V3) + factor(V4) + V5 + factor(V6) + factor(V7) + V8 + factor(V9) + factor(V10) + V11 + factor(V12) + V13 + factor(V14) + factor(V15) + V16 + factor(V17) + V18 + factor(V19) + factor(V20)
model = glm(func, family = binomial(link = "logit"), data = train)
summary(model)
cv.glm(train, model, K = 10)$delta
knit_with_parameters('C:/classwork/isye6501/Week04/HW04.Rmd')
library(stats)
glm
cv.glm
cv.glmasd
crime <- read.table("9.1uscrimeSummer2018.txt", header=TRUE)
pca <- prcomp(crime[,1:15], scale. = TRUE)
summary(pca)
n_pca_fields <- 7
pca_crime <- data.frame(cbind(pca$x[,1:n_pca_fields], Crime=crime[,16]))
model <- lm(Crime~., data=pca_crime)
summary(model)
model_pca_coef <- model$coefficients[2:length(model$coefficients)]
pca_x_comp <- t(pca$rotation[,1:length(model$coefficients) - 1])
scaled_coef <- model_pca_coef%*%pca_x_comp
intercept <- model$coefficients[1] - sum(scaled_coef*sapply(crime[,1:15], mean)/sapply(crime[,1:15],sd))
coef <- scaled_coef/sapply(crime[,1:15],sd)
M = 14.0
So = 0
Ed = 10.0
Po1 = 12.0
Po2 = 15.5
LF = 0.640
M.F = 94.0
Pop = 150
NW = 1.1
U1 = 0.120
U2 = 3.6
Wealth = 3200
Ineq = 20.1
Prob = 0.04
Time = 39.0
testpoint <- data.frame(M,So,Ed, Po1, Po2, LF, M.F, Pop, NW, U1, U2, Wealth, Ineq, Prob, Time)
ans <- coef%*%t(as.matrix(testpoint)) + intercept
ans
summary(model)$r.squared
summary(model)$adj.r.squared
library(tree)
library(randomForest)
set.seed(1)
calc.RMSE <- function(predicted, actual){
RMSE <- sqrt(mean((predicted - actual)^2))
}
crime <- read.table("9.1uscrimeSummer2018.txt", header=TRUE)
test_ind <- sample(1:nrow(crime), size=12)
crime_train <- crime[-test_ind,]
crime_test <- crime[test_ind,]
cart_model <- tree(Crime~., data=crime_train, x=TRUE, y=TRUE)
cart_rmse_train <- calc.RMSE(predict(cart_model), cart_model$y)
cart_mean_abs_e_train <- mean(abs((predict(cart_model) - cart_model$y)/cart_model$y))
cart_rmse_test <- calc.RMSE(predict(cart_model, crime_test), crime_test$Crime)
cart_mean_abs_e_test <- mean(abs((predict(cart_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("Training RMSE: %s\n", round(cart_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value\n", round(100*cart_mean_abs_e_train,1)))
cat(sprintf("Test RMSE: %s\n", round(cart_rmse_test,1)))
cat(sprintf("For testing data: On average, the model predicted value is within %s percent of the actual value\n", round(100*cart_mean_abs_e_test,1)))
numpred <- 4
rf_model <- randomForest(Crime~., data=crime_train, mtry=numpred, importance=TRUE)
rf_rmse_train <- calc.RMSE(predict(rf_model), rf_model$y)
rf_mean_abs_e_train <- mean(abs((predict(rf_model) - rf_model$y)/rf_model$y))
rf_rmse_test <- calc.RMSE(predict(rf_model, crime_test), crime_test$Crime)
rf_mean_abs_e_test <- mean(abs((predict(rf_model, crime_test) - crime_test$Crime)/crime_test$Crime))
cat(sprintf("RMSE: %s\n", round(rf_rmse_train,1)))
cat(sprintf("For training data: On average, the model predicted value is within %s percent of the actual value\n", round(100*rf_mean_abs_e_train,1)))
cat(sprintf("RMSE: %s\n", round(rf_rmse_test,1)))
cat(sprintf("For testing data:On average, the model predicted value is within %s percent of the actual value\n", round(100*rf_mean_abs_e_test,1)))
length(predict(cart_model))
length(unique(predict(cart_model)))
library(stats)
findat <- data.frame(read.table("10.3germancreditSummer2018.txt", header = F))
findat[,21] <- findat[,21] - 1
train_indices <- sample(1:nrow(findat), size = round(nrow(findat) * .8))
train = findat[train_indices,]
test = findat[-train_indices,]
func = V21 ~ factor(V1) + V2 + factor(V3) + factor(V4) + V5 + factor(V6) + factor(V7) + V8 + factor(V9) + factor(V10) + V11 + factor(V12) + V13 + factor(V14) + factor(V15) + V16 + factor(V17) + V18 + factor(V19) + factor(V20)
model = glm(func, family = binomial(link = "logit"), data = train)
summary(model)
#cv.glm(train, model, K = 10)$delta <---Cannot get this to work in R Markdown. Output should be
library(stats)
findat <- data.frame(read.table("10.3germancreditSummer2018.txt", header = F))
findat[,21] <- findat[,21] - 1
train_indices <- sample(1:nrow(findat), size = round(nrow(findat) * .8))
train = findat[train_indices,]
test = findat[-train_indices,]
func = V21 ~ factor(V1) + V2 + factor(V3) + factor(V4) + V5 + factor(V6) + factor(V7) + V8 + factor(V9) + factor(V10) + V11 + factor(V12) + V13 + factor(V14) + factor(V15) + V16 + factor(V17) + V18 + factor(V19) + factor(V20)
model = glm(func, family = binomial(link = "logit"), data = train)
summary(model)
cv.glm(train, model, K = 10)$delta #<---Cannot get this to work in R Markdown. Output should be
